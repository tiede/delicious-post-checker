/*
 * MainFrame.java
 *
 * Created on 29. marts 2006, 15:29
 */

package dk.tiede.feed.ui;

import del.icio.us.Delicious;
import del.icio.us.beans.Post;
import dk.tiede.linkchecker.LinkChecker;
import edu.stanford.ejalbert.BrowserLauncher;
import edu.stanford.ejalbert.launching.BrowserLaunchingFactory;
import java.awt.Cursor;
import java.awt.MenuItem;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadPoolExecutor;
import javax.swing.AbstractListModel;
import javax.swing.JDialog;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JProgressBar;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.UIManager;
import javax.swing.event.ListDataListener;
import javax.swing.plaf.synth.SynthLookAndFeel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeModel;
import org.jdesktop.swingworker.SwingWorker;

/**
 *
 * @author  kbt
 */
public class MainFrame extends javax.swing.JFrame {
    
    /** Creates new form MainFrame */
    public MainFrame() throws Exception {
        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        //SynthLookAndFeel laf = new SynthLookAndFeel();
        //UIManager.setLookAndFeel(laf);
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonGroup1 = new javax.swing.ButtonGroup();
        labelUsername = new javax.swing.JLabel();
        username = new javax.swing.JTextField();
        buttonCheckLinks = new javax.swing.JButton();
        labelPassword = new javax.swing.JLabel();
        password = new javax.swing.JPasswordField();
        labelResult = new javax.swing.JLabel();
        resultListScrollbar = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList();
        labelStatus = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        buttonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Del.icio.us post checker");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        labelUsername.setText("Del.icio.us user");

        buttonCheckLinks.setText("Check links");
        buttonCheckLinks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                execute_activated(evt);
            }
        });

        labelPassword.setText("Password");

        password.setFont(new java.awt.Font("Tahoma", 0, 11));

        labelResult.setText("Result");

        resultList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                resultList_mouseReleased(evt);
            }
        });

        resultListScrollbar.setViewportView(resultList);

        labelStatus.setText("Status");

        progressBar.setString("0/0");
        progressBar.setStringPainted(true);

        buttonCancel.setText("Cancel");
        buttonCancel.setEnabled(false);
        buttonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancel_activated(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(resultListScrollbar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(labelUsername)
                            .add(labelPassword))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(username)
                            .add(password, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 204, Short.MAX_VALUE))
                    .add(labelResult)
                    .add(layout.createSequentialGroup()
                        .add(labelStatus)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(progressBar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(buttonCheckLinks)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(buttonCancel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelUsername)
                    .add(username, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelPassword)
                    .add(password, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(labelResult)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(resultListScrollbar, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(labelStatus)
                    .add(progressBar, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(buttonCancel)
                    .add(buttonCheckLinks))
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancel_activated(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancel_activated
        if (linkChecker != null) {
            JOptionPane.showMessageDialog(this, "Cancelling the checker... This may take some time");
            linkChecker.shutdownPoolNow();
            cancelTimer = new Timer(500, new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    if (linkChecker.isTerminated()) {
                        defaultGUI();
                        cancelTimer.stop();
                    }
                }
            });
            cancelTimer.start();
        }
    }//GEN-LAST:event_cancel_activated

    private void execute_activated(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_execute_activated
        final ResultListDataModel dataModel = new ResultListDataModel();
        resultList.setModel(dataModel);
        progressBar.setMinimum(0);
        progressBar.setMaximum(100);
        buttonCheckLinks.setEnabled(false);
        buttonCancel.setEnabled(true);
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        try {
            Delicious factory = new Delicious(username.getText(), new String(password.getPassword()));
            final List posts = factory.getAllPosts();
            linkChecker = new PoolThreadLinkChecker(posts.size());
            linkChecker.addPropertyChangeListener (new PropertyChangeListener() {
                public void propertyChange(PropertyChangeEvent pcEvt) {
                    if ("progress".equals(pcEvt.getPropertyName())) {
                        Long progress = (Long)pcEvt.getNewValue();
                        progressBar.setValue(progress.intValue());
                    }
                    else if ("subtaskDone".equals(pcEvt.getPropertyName())) {
                        Integer subtaskDone = (Integer)pcEvt.getNewValue();
                        progressBar.setString(subtaskDone + "/" + posts.size());
                    }
                    else if ("done".equals(pcEvt.getPropertyName())) {
                        defaultGUI();
                    }
                }
            });

            for (Iterator it = posts.iterator() ; it.hasNext() ; ) {
                final Post p = (Post)it.next();
                SwingWorker worker = new SwingWorker() {
                    private LinkChecker.Result result;

                    @Override
                    protected Object doInBackground() throws Exception {
                        return result = LinkChecker.checkLink(p.getHref());
                    }

                    @Override
                    protected void done() {
                        System.out.println("Post " + p.getDescription());
                        if (!result.isSuccess()) {
                            dataModel.addPost(p, result);
                        }
                        firePropertyChange("done", false, true);
                    }
                };

                linkChecker.submitLinkCheck(worker);
            }

            linkChecker.shutdownPool();
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Could not connect to del.icio.us API.\nCheck your user name and password or try again later.");
            defaultGUI();
        }
    }//GEN-LAST:event_execute_activated

    private void resultList_mouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultList_mouseReleased
        if (evt.getButton() == MouseEvent.BUTTON3) {
            int index = resultList.locationToIndex(evt.getPoint());
            resultList.setSelectedIndex(index);
        }
        
        final Post selectedPost = ((ResultListDataModel)resultList.getModel()).getPostAt(resultList.getSelectedIndex());
        JPopupMenu popupMenu = new JPopupMenu();
        if (popupMenu.isPopupTrigger(evt)) {
            JMenuItem openMenuItem = new JMenuItem("Open in browser...");
            openMenuItem.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    try {
                        final BrowserLauncher launcher = new BrowserLauncher(null);
                        ExecutorService service = Executors.newSingleThreadExecutor();
                        service.execute(new Runnable() {
                            public void run() {
                                try {
                                    launcher.openURLinBrowser(selectedPost.getHref());
                                }
                                catch (Exception browserLauncherException) {
                                    JOptionPane.showMessageDialog(MainFrame.this, "Could not open the link in a operating specific browser");
                                }
                            }
                        });
                        service.shutdown();
                    }
                    catch (Exception browserLauncherException) {
                        JOptionPane.showMessageDialog(MainFrame.this, "Could not open the link in a operating specific browser");
                    }
                }
            });
            popupMenu.add(openMenuItem);
            
            JMenuItem deleteItem = new JMenuItem("Delete post");
            deleteItem.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    int answer = JOptionPane.showConfirmDialog(MainFrame.this, 
                            "Do you really want to delete the post?", 
                            "Confirm deletion", 
                            JOptionPane.YES_NO_OPTION);
                    if (answer == JOptionPane.YES_OPTION) {
                        Delicious factory = new Delicious(username.getText(), new String(password.getPassword()));
                        factory.deletePost(selectedPost.getHref());
                        ((ResultListDataModel)resultList.getModel()).deletePost(selectedPost);
                    }
                }
            });
            popupMenu.add(deleteItem);
            popupMenu.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_resultList_mouseReleased
    
    private void defaultGUI() {
        buttonCheckLinks.setEnabled(true);
        buttonCancel.setEnabled(false);
        this.setCursor(Cursor.getDefaultCursor());
    }
    
    private static class ResultListDataModel extends AbstractListModel {
        
        List<Post> posts = Collections.synchronizedList(new ArrayList<Post>());
        Map<Post, LinkChecker.Result> resultMap = Collections.synchronizedMap(new HashMap<Post, LinkChecker.Result>());
        
        public Object getElementAt(int index) {
            Post p = (Post)posts.get(index);
            LinkChecker.Result result = resultMap.get(p);
            String objectName = "";
            if (result.isIoError()) {
                objectName = "Timeout : ";
            }
            else {
                objectName = "Response : " + result.getResponseCode() + " : ";
            }
            return objectName + p.getDescription() + " (" + p.getHref() + ")";
        }

        public int getSize() {
            return posts.size();
        }
        
        public synchronized void addPost(Post p, LinkChecker.Result r) {
            posts.add(p);
            resultMap.put(p, r);
            fireIntervalAdded(this, posts.size() - 1, posts.size());
        }
        
        public synchronized void deletePost(Post p) {
            posts.remove(p);
            fireIntervalRemoved(this, posts.size(), posts.size() -1);
        }
        
        public Post getPostAt(int index) {
            return posts.get(index);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainFrame().setVisible(true);
                }
                catch (Exception e) {
                    
                }
            }
        });
    }
    
    private PoolThreadLinkChecker linkChecker;
    private Timer cancelTimer;
            
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonCancel;
    private javax.swing.JButton buttonCheckLinks;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel labelPassword;
    private javax.swing.JLabel labelResult;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JLabel labelUsername;
    private javax.swing.JPasswordField password;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JList resultList;
    private javax.swing.JScrollPane resultListScrollbar;
    private javax.swing.JTextField username;
    // End of variables declaration//GEN-END:variables
    
}
